{"version":3,"sources":["webpack:///./src/app/modules/auth/auth-routing.module.ts","webpack:///./src/app/modules/auth/auth.module.ts","webpack:///./src/app/modules/auth/components/email-varification/email-varification.component.css","webpack:///./src/app/modules/auth/components/email-varification/email-varification.component.html","webpack:///./src/app/modules/auth/components/email-varification/email-varification.component.ts","webpack:///./src/app/modules/auth/components/login/login.component.html","webpack:///./src/app/modules/auth/components/login/login.component.scss","webpack:///./src/app/modules/auth/components/login/login.component.ts","webpack:///./src/app/modules/auth/components/master/master.component.html","webpack:///./src/app/modules/auth/components/master/master.component.scss","webpack:///./src/app/modules/auth/components/master/master.component.ts","webpack:///./src/app/modules/auth/components/register-finish/register-finish.component.css","webpack:///./src/app/modules/auth/components/register-finish/register-finish.component.html","webpack:///./src/app/modules/auth/components/register-finish/register-finish.component.ts","webpack:///./src/app/modules/auth/components/reset-password/reset-password.component.html","webpack:///./src/app/modules/auth/components/reset-password/reset-password.component.scss","webpack:///./src/app/modules/auth/components/reset-password/reset-password.component.ts","webpack:///./src/app/modules/auth/components/sign-up/sign-up.component.html","webpack:///./src/app/modules/auth/components/sign-up/sign-up.component.scss","webpack:///./src/app/modules/auth/components/sign-up/sign-up.component.ts","webpack:///./src/app/modules/auth/components/update-password/update-password.component.css","webpack:///./src/app/modules/auth/components/update-password/update-password.component.html","webpack:///./src/app/modules/auth/components/update-password/update-password.component.ts","webpack:///./src/app/modules/shared/resolvers/resolver.service.ts"],"names":[],"mappings":"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","file":"modules-auth-auth-module.js","sourcesContent":["/**\r\n * @module AuthRoutingModule\r\n * Auth routing module of the application.\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n// Importing components\r\nimport { MasterComponent } from '@modules/auth/components/master/master.component';\r\nimport { LoginComponent } from '@modules/auth/components/login/login.component';\r\n\r\n// Importing services\r\nimport { AuthService } from '@modules/auth/services/auth.service';\r\n\r\n// Importing guards\r\nimport { HasTokenResolver } from '@shared/resolvers/resolver.service';\r\nimport { SignUpComponent } from '@app/modules/auth/components/sign-up/sign-up.component';\r\nimport { ResetPasswordComponent } from '@app/modules/auth/components/reset-password/reset-password.component';\r\nimport { RegisterFinishComponent } from '@app/modules/auth/components/register-finish/register-finish.component';\r\nimport { EmailVarificationComponent } from '@app/modules/auth/components/email-varification/email-varification.component';\r\nimport { UpdatePasswordComponent } from '@app/modules/auth/components/update-password/update-password.component';\r\n\r\n// defining routes\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: MasterComponent, children: [\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent,\r\n        data: { title: 'Login' }\r\n      },\r\n      {\r\n        path: 'signup',\r\n        component: SignUpComponent,\r\n        data: { title: 'Sign Up' }\r\n      },\r\n      {\r\n        path: 'thankyou',\r\n        component: RegisterFinishComponent,\r\n        data: { title: 'Thank You' }\r\n      },\r\n      {\r\n        path: 'reset-password',\r\n        component: ResetPasswordComponent,\r\n        data: { title: 'Reset Password' }\r\n      },\r\n\r\n      {\r\n        path: 'email_varification/:id/:code',\r\n        component: EmailVarificationComponent,\r\n        data: { title: 'Reset Password' }\r\n      },\r\n\r\n      {\r\n        path: 'forgot_password/:id/:code',\r\n        component: UpdatePasswordComponent,\r\n        data: { title: 'Forgot Password' }\r\n      },\r\n    ], resolve: { access: HasTokenResolver }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {\r\n  static components = [\r\n    LoginComponent,\r\n    SignUpComponent,\r\n    ResetPasswordComponent,\r\n    MasterComponent,\r\n    RegisterFinishComponent,\r\n    EmailVarificationComponent,\r\n    UpdatePasswordComponent\r\n  ];\r\n\r\n  static providers = [\r\n    AuthService,\r\n    HasTokenResolver\r\n  ];\r\n\r\n}\r\n","/**\r\n * @module AuthModule\r\n * @description\r\n * Auth module of the application.\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthRoutingModule } from '@modules/auth/auth-routing.module';\r\nimport { SignUpComponent } from './components/sign-up/sign-up.component';\r\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\r\n\r\n@NgModule({\r\n  declarations: [AuthRoutingModule.components],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [AuthRoutingModule.providers]\r\n})\r\nexport class AuthModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL2VtYWlsLXZhcmlmaWNhdGlvbi9lbWFpbC12YXJpZmljYXRpb24uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"container top-banner\\\">\\r\\n      \\t<div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-5 banner-heading\\\">\\r\\n                <h2>Email Confirmation <strong>message! </strong></h2>\\r\\n              \\r\\n             </div>\\r\\n        </div>\\r\\n   \\r\\n    </div>\\r\\n   \\r\\n  <!-- category-bar -->\\r\\n<div class=\\\"container-fluid bg-section\\\">\\r\\n  <div class=\\\"row\\\"  >\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n    \\t<div class=\\\"col-md-12 aboutus\\\"  *ngIf=\\\"isEmailConfirmed\\\">\\r\\n     \\r\\n          <span>Email Confirmation <strong>success! </strong>\\r\\n            Thanks for confirming your email. Click <strong><a routerLink=\\\"/login\\\">here</a></strong> to login.\\r\\n          </span>      \\r\\n       \\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-md-12 aboutus\\\"  *ngIf=\\\"!isEmailConfirmed && !alreadyactivate\\\">\\r\\n     \\r\\n          <span>Email Confirmation <strong> Error! </strong>\\r\\n            We are unabled to  confirm your email.    \\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-12 aboutus\\\"   *ngIf=\\\"alreadyactivate\\\">\\r\\n  \\r\\n      \\r\\n          <span>Email Already Activated Click <strong><a routerLink=\\\"/login\\\">here</a></strong> to login.</span>\\r\\n       \\r\\n\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n  </div>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n   \\r\\n\\r\\n   \"","import { \r\n  Component, \r\n  OnInit,\r\n  Input \r\n}                       from '@angular/core';\r\n\r\nimport { \r\n  ActivatedRoute, \r\n  ParamMap \r\n}                       from '@angular/router';\r\n\r\nimport { AuthService } from '@modules/auth/services/auth.service';\r\nimport { LoaderService } from '@core/services/loader-service';\r\n\r\n@Component({\r\n  selector: 'app-email-varification',\r\n  templateUrl: './email-varification.component.html',\r\n  styleUrls: ['./email-varification.component.css']\r\n})\r\n\r\n\r\nexport class EmailVarificationComponent implements OnInit {\r\n\r\n  constructor (\r\n    private route : ActivatedRoute,\r\n    private authService:AuthService, private loader: LoaderService\r\n  ){}\r\n\r\n  isEmailConfirmed:boolean;\r\n  alreadyactivate:boolean;\r\n  \r\n  ngOnInit() {\r\n    this.isEmailConfirmed = false;\r\n    this.loader.startLoading();\r\n    this.route.params.subscribe(params => {\r\n     this.authService.confirm({ \r\n        id : params.id, \r\n        token : params.code \r\n      })\r\n      .subscribe(response => {\r\n        this.loader.stopLoading();\r\n        if(response.status == 'success'){\r\n\r\n          if(response.message=='active'){\r\n            this.isEmailConfirmed = true; \r\n          }\r\n          if(response.message=='alreadyactivate'){\r\n            this.alreadyactivate = true; \r\n          }\r\n         \r\n        }\r\n      \r\n      })\r\n    })\t\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row justify-content-center\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n\\r\\n      <div class=\\\"shadow rounded mt-5 mb-5\\\">\\r\\n        <div class=\\\"card-body p-5\\\">\\r\\n          <h3 class=\\\"card-title mb-4\\\">Login to your account</h3>\\r\\n          <div class=\\\"card-text\\\">\\r\\n            <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email_address\\\">Username or Email address</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"username\\\" autofocus>\\r\\n                <div *ngIf=\\\"\\r\\n            loginForm.get('username').invalid && \\r\\n            loginForm.get('username').touched\\\">\\r\\n\\r\\n                  <span *ngIf=\\\"\\r\\n              loginForm.get('username').errors.required || \\r\\n              loginForm.get('username').errors.email\\t\\r\\n              \\\" class=\\\"help-block text-danger\\\">\\r\\n                    Email is required\\r\\n                  </span>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\">\\r\\n          <div *ngIf=\\\"\\r\\n            loginForm.get('password').invalid && \\r\\n            loginForm.get('password').touched\\\">\\r\\n            <span *ngIf=\\\"\\r\\n              loginForm.get('password').errors.required\\\" class=\\\"help-block text-danger\\\">\\r\\n                password is required\\r\\n            </span>\\t\\t\\r\\n          </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group d-flex justify-content-between\\\">\\r\\n                <div class=\\\"form-check\\\">\\r\\n                  <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" value=\\\"\\\" id=\\\"remember_me\\\">\\r\\n                  <label class=\\\"form-check-label\\\" for=\\\"remember_me\\\">Remember Me</label>\\r\\n                </div>\\r\\n                <a href=\\\"javascript:void(0)\\\" routerLink=\\\"/auth/reset-password\\\">Forgot Password?</a>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"text-center\\\">\\r\\n                <button class=\\\"btn btn-lg btn-primary btn-submit btn-radius\\\">Submit</button>\\r\\n              </div>\\r\\n            </form>\\r\\n\\r\\n\\r\\n          </div>\\r\\n\\r\\n\\r\\n          <div class=\\\"text-center mt-4\\\">\\r\\n            <p class=\\\"signup-text mb-0\\\">Dont have an account? <a href=\\\"javascript:void(0)\\\" routerLink=\\\"/auth/signup\\\">Sign\\r\\n                Up</a></p>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\"","/**\r\n * Login component for auth module\r\n */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { AuthService } from '@modules/auth/services/auth.service';\r\nimport { JWTAuthService } from '@core/services/jwt-auth.service';\r\nimport { LoaderService } from '@core/services/loader-service';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  constructor(private fb: FormBuilder, private authService: AuthService,\r\n    private loginService: JWTAuthService, private loader: LoaderService) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.fb.group({\r\n      username: ['a@a.com', [\r\n        Validators.required\r\n      ]],\r\n      password: ['111111', Validators.required],\r\n      rememberMe: ['']\r\n    });\r\n  }\r\n  onSubmit() {\r\n    let formModal = this.loginForm.value;\r\n    this.loader.startLoading();\r\n    this.authService.login(formModal).subscribe(result => {\r\n      this.loader.stopLoading();\r\n      if (result.status === 'success') {\r\n        result.record.authToken = result.record.accessToken;\r\n        this.loginService.setLoginUserDetail(result.record);\r\n      } else if (result.status === 'notActive') {\r\n        alert(\"Your email address is inactive please check your inbox and activate account.\");\r\n      } else {\r\n        alert(\"Email and password is wrong\");\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n","module.exports = \"<router-outlet></router-outlet>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXIuY29tcG9uZW50LnNjc3MifQ== */\"","/**\r\n * This is the entry component for the auth module.\r\n */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-master',\r\n  templateUrl: './master.component.html',\r\n  styleUrls: ['./master.component.scss']\r\n})\r\nexport class MasterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL3JlZ2lzdGVyLWZpbmlzaC9yZWdpc3Rlci1maW5pc2guY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"\\r\\n\\t<div class=\\\"container top-banner\\\">\\r\\n\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t<div class=\\\"col-md-5 banner-heading\\\">\\r\\n\\t\\t\\t\\t <h2><strong>Thank you for signing up with Down Line Club</strong></h2>\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>      \\r\\n\\r\\n\\r\\n<div class=\\\"container category-bar\\\">\\r\\n\\t\\r\\n\\t  <div class=\\\"row\\\">\\r\\n  \\r\\n\\t\\t\\t <div class=\\\"col-md-12 aboutus\\\" style=\\\"margin-bottom:50px;\\\">\\r\\n\\t\\t<span>\\r\\n\\t\\t\\tA confirmation email has been sent to your email address. \\r\\n\\t\\t\\tTo confirm your account, please click on the \\\"Activate account\\\" link.\\r\\n\\t\\t</span>\\r\\n\\t</div>\\r\\n\\t  </div>\\r\\n\\t</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  ActivatedRoute,\r\n  Router, \r\n  ParamMap \r\n}                             from '@angular/router';\r\n@Component({\r\n  selector: 'app-register-finish',\r\n  templateUrl: './register-finish.component.html',\r\n  styleUrls: ['./register-finish.component.css']\r\n})\r\nexport class RegisterFinishComponent implements OnInit {\r\npage:any;\r\n  constructor(\r\n    private route : ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.loadPage();   \r\n  }\r\n  loadPage(){\r\n         this.page=\"user\";\r\n   }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row justify-content-center\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n\\r\\n        <div class=\\\"shadow rounded mt-5\\\">\\r\\n            <div class=\\\"card-body p-5\\\">\\r\\n              <h3 class=\\\"card-title\\\">Reset your password</h3>\\r\\n              <span style='color:green;'>{{message}}</span>\\r\\n              <div class=\\\"card-text\\\">\\r\\n                  <form [formGroup]=\\\"forgotForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <div [ngClass]=\\\"{'has-error' : \\r\\n                              forgotForm.get('email').invalid && ( \\r\\n                              forgotForm.get('email').dirty || \\r\\n                              forgotForm.get('email').touched)\\r\\n                            }\\\"\\r\\n                            class=\\\"form-group\\\">  \\r\\n                            <div class=\\\"white-btn rmshd\\\">\\r\\n                              <input \\r\\n                                type=\\\"text\\\" \\r\\n                                formControlName=\\\"email\\\"\\r\\n                                class=\\\"form-control\\\"\\r\\n                                placeholder=\\\"Enter your username or email address\\\">\\r\\n                            </div>    \\r\\n                            \\r\\n                            <div *ngIf=\\\"\\r\\n                            forgotForm.get('email').invalid && ( \\r\\n                              forgotForm.get('email').dirty || \\r\\n                              forgotForm.get('email').touched)\\\"\\r\\n                            >\\r\\n                            <span *ngIf=\\\"forgotForm.get('email').errors.required\\\"\\r\\n                              class=\\\"help-block\\\">\\r\\n                                Username or Email is required.\\r\\n                            </span>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"text-center\\\">\\r\\n                          <button class=\\\"btn btn-lg btn-primary btn-submit btn-radius\\\" [disabled]=\\\"!forgotForm.valid\\\">Get New Password</button>\\r\\n                        </div>\\r\\n                    </form> \\r\\n\\r\\n              </div>\\r\\n\\r\\n           \\r\\n\\r\\n              <div class=\\\"text-center mt-4\\\">\\r\\n                  <p class=\\\"signup-text mb-0\\\">Remember your password? <a href=\\\"javascript:void(0)\\\" routerLink=\\\"/auth/login\\\">Login Here</a></p>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\nimport { AuthService } from '@modules/auth/services/auth.service';\r\nimport { LoaderService } from '@core/services/loader-service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  forgotForm: FormGroup;\r\n  message:any;\r\n  constructor( private fb : FormBuilder,\r\n    private authService : AuthService, private loader: LoaderService) { }\r\n\r\n  ngOnInit() {\r\n    this.forgotForm = this.fb.group({\t \r\n      email \t: ['', [\r\n        Validators.required\r\n      ]]\r\n    }); \r\n  }\r\n\r\n  onSubmit(){\r\n    let formModel = this.forgotForm.value;\r\n    this.loader.startLoading();\r\n    this.authService.forgotPassword(formModel)\r\n    .subscribe((result)=>{\r\n      this.loader.stopLoading();\r\n      if(result.status === 'success'){\r\n        this.message='Reset password instructions has been sent to your email address. Please check your email'; \r\n      } else if (result.status === 'notActive') {\r\n        alert(\"Your email address is inactive please check your inbox and activate account.\");\r\n      }   \r\n      else{\r\n        this.message='We have no account for this email, Please try again with other email.';\r\n      } \r\n    });\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"container mt-5 mb-5\\\">\\r\\n\\r\\n  <h2 class=\\\"page-title mb-5\\\">New User Sign up here! <small>Already have an account <a href=\\\"javascript:void(0)\\\" routerLink=\\\"/auth/login\\\">Login here</a></small></h2>\\r\\n  <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-header\\\">\\r\\n        <h5>Account Information</h5>\\r\\n      </div>\\r\\n      <div class=\\\"card-body\\\">\\r\\n        \\r\\n        <div class=\\\"row\\\">\\r\\n\\r\\n          <div class=\\\"col-md-6\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"username\\\">Username</label>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"userName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.userName.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.userName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.userName.errors.required\\\">Username is required</div>\\r\\n                              <div *ngIf=\\\"f.userName.errors.minlength\\\">Username must be at least 6 characters</div>\\r\\n                          </div>\\r\\n                          <div *ngIf=\\\"f.userName.errors && f.userName.errors.isUernameUnique\\\" class=\\\"invalid-feedback\\\">\\r\\n                            *Username already exists.\\r\\n                        </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-md-6\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                              <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                          </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-md-6\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"confirm_password\\\">Confirm Password</label>\\r\\n            <input type=\\\"password\\\" formControlName=\\\"confirmPassword\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmPassword.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.confirmPassword.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.confirmPassword.errors.required\\\">Confirm Password is required</div>\\r\\n                              <div *ngIf=\\\"f.confirmPassword.errors.mustMatch\\\">Passwords must match</div>\\r\\n                          </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-md-6\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email_address\\\">E-mail Address</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            \\r\\n                              <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n                              <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n                          </div>\\r\\n                          <div *ngIf=\\\"f.email.errors && f.email.errors.isEmailUnique\\\" class=\\\"invalid-feedback\\\">\\r\\n                              *Email already exists.\\r\\n                          </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-md-6\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"confirm_email_address\\\">Confirm E-mail Address</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"confirmEmail\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmEmail.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.confirmEmail.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"f.confirmEmail.errors.email\\\">Confirm Email must be a valid email address</div>\\r\\n                              <div *ngIf=\\\"f.confirmEmail.errors.required\\\">Confirm Email is required</div>\\r\\n                              <div *ngIf=\\\"f.confirmEmail.errors.mustMatch\\\">Email must match</div>\\r\\n                          </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-md-6\\\">\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"confirm_email_address\\\">Sponsored By</label>\\r\\n                <div  class=\\\"form-control\\\"> {{referralName}} </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- <div class=\\\"card mt-5\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <h5>Billing Address</h5>\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n          \\r\\n          <div class=\\\"row\\\">\\r\\n    \\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"first_name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\r\\n                          </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n    \\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"last_name\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\r\\n                          </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n    \\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address_1\\\">Address 1</label>\\r\\n              <input type=\\\"text\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.address.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.address.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.address.errors.required\\\">Address is required</div>\\r\\n                          </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n    \\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address_2\\\">Address 2</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"address2\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.address2.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.address2.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.address2.errors.required\\\">Address2 is required</div>\\r\\n                          </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                  <input type=\\\"text\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.city.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.city.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.city.errors.required\\\">City is required</div>\\r\\n                          </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"state\\\">State</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"state\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.state.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.state.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.state.errors.required\\\">State is required</div>\\r\\n                          </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"postal_code\\\">Postal Code</label>\\r\\n                  <input type=\\\"text\\\" formControlName=\\\"postalCode\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.postalCode.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.postalCode.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.postalCode.errors.required\\\">Postal Code is required</div>\\r\\n                          </div>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <select name=\\\"country\\\" id=\\\"country\\\" class=\\\"form-control\\\">\\r\\n                    <option value=\\\"AF\\\">Afghanistan</option>\\r\\n                      <option value=\\\"AX\\\">Aland Islands</option>\\r\\n                      <option value=\\\"AL\\\">Albania</option>\\r\\n                      <option value=\\\"DZ\\\">Algeria</option>\\r\\n                      <option value=\\\"AS\\\">American Samoa</option>\\r\\n                      <option value=\\\"AD\\\">Andorra</option>\\r\\n                      <option value=\\\"AO\\\">Angola</option>\\r\\n                      <option value=\\\"AI\\\">Anguilla</option>\\r\\n                      <option value=\\\"AQ\\\">Antarctica</option>\\r\\n                      <option value=\\\"AG\\\">Antigua and Barbuda</option>\\r\\n                      <option value=\\\"AR\\\">Argentina</option>\\r\\n                      <option value=\\\"AM\\\">Armenia</option>\\r\\n                      <option value=\\\"AW\\\">Aruba</option>\\r\\n                      <option value=\\\"AU\\\">Australia</option>\\r\\n                      <option value=\\\"AT\\\">Austria</option>\\r\\n                      <option value=\\\"AZ\\\">Azerbaijan</option>\\r\\n                      <option value=\\\"BS\\\">Bahamas</option>\\r\\n                      <option value=\\\"BH\\\">Bahrain</option>\\r\\n                      <option value=\\\"BD\\\">Bangladesh</option>\\r\\n                      <option value=\\\"BB\\\">Barbados</option>\\r\\n                      <option value=\\\"BY\\\">Belarus</option>\\r\\n                      <option value=\\\"BE\\\">Belgium</option>\\r\\n                      <option value=\\\"BZ\\\">Belize</option>\\r\\n                      <option value=\\\"BJ\\\">Benin</option>\\r\\n                      <option value=\\\"BM\\\">Bermuda</option>\\r\\n                      <option value=\\\"BT\\\">Bhutan</option>\\r\\n                      <option value=\\\"BO\\\">Bolivia</option>\\r\\n                      <option value=\\\"BA\\\">Bosnia and Herzegovina</option>\\r\\n                      <option value=\\\"BW\\\">Botswana</option>\\r\\n                      <option value=\\\"BV\\\">Bouvet Island</option>\\r\\n                      <option value=\\\"BR\\\">Brazil</option>\\r\\n                      <option value=\\\"IO\\\">British Indian Ocean Territory</option>\\r\\n                      <option value=\\\"VG\\\">British Virgin Islands</option>\\r\\n                      <option value=\\\"BN\\\">Brunei</option>\\r\\n                      <option value=\\\"BG\\\">Bulgaria</option>\\r\\n                      <option value=\\\"BF\\\">Burkina Faso</option>\\r\\n                      <option value=\\\"BI\\\">Burundi</option>\\r\\n                      <option value=\\\"KH\\\">Cambodia</option>\\r\\n                      <option value=\\\"CM\\\">Cameroon</option>\\r\\n                      <option value=\\\"CA\\\">Canada</option>\\r\\n                      <option value=\\\"CV\\\">Cape Verde</option>\\r\\n                      <option value=\\\"KY\\\">Cayman Islands</option>\\r\\n                      <option value=\\\"CF\\\">Central African Republic</option>\\r\\n                      <option value=\\\"TD\\\">Chad</option>\\r\\n                      <option value=\\\"CL\\\">Chile</option>\\r\\n                      <option value=\\\"CN\\\">China</option>\\r\\n                      <option value=\\\"CX\\\">Christmas Island</option>\\r\\n                      <option value=\\\"CC\\\">Cocos (Keeling) Islands</option>\\r\\n                      <option value=\\\"CO\\\">Colombia</option>\\r\\n                      <option value=\\\"KM\\\">Comoros</option>\\r\\n                      <option value=\\\"CG\\\">Congo (Brazzaville)</option>\\r\\n                      <option value=\\\"CD\\\">Congo (Kinshasa)</option>\\r\\n                      <option value=\\\"CK\\\">Cook Islands</option>\\r\\n                      <option value=\\\"CR\\\">Costa Rica</option>\\r\\n                      <option value=\\\"HR\\\">Croatia</option>\\r\\n                      <option value=\\\"CU\\\">Cuba</option>\\r\\n                      <option value=\\\"CY\\\">Cyprus</option>\\r\\n                      <option value=\\\"CZ\\\">Czech Republic</option>\\r\\n                      <option value=\\\"DK\\\">Denmark</option>\\r\\n                      <option value=\\\"DJ\\\">Djibouti</option>\\r\\n                      <option value=\\\"DM\\\">Dominica</option>\\r\\n                      <option value=\\\"DO\\\">Dominican Republic</option>\\r\\n                      <option value=\\\"EC\\\">Ecuador</option>\\r\\n                      <option value=\\\"EG\\\">Egypt</option>\\r\\n                      <option value=\\\"SV\\\">El Salvador</option>\\r\\n                      <option value=\\\"GQ\\\">Equatorial Guinea</option>\\r\\n                      <option value=\\\"ER\\\">Eritrea</option>\\r\\n                      <option value=\\\"EE\\\">Estonia</option>\\r\\n                      <option value=\\\"ET\\\">Ethiopia</option>\\r\\n                      <option value=\\\"FK\\\">Falkland Islands</option>\\r\\n                      <option value=\\\"FO\\\">Faroe Islands</option>\\r\\n                      <option value=\\\"FJ\\\">Fiji</option>\\r\\n                      <option value=\\\"FI\\\">Finland</option>\\r\\n                      <option value=\\\"FR\\\">France</option>\\r\\n                      <option value=\\\"GF\\\">French Guiana</option>\\r\\n                      <option value=\\\"PF\\\">French Polynesia</option>\\r\\n                      <option value=\\\"TF\\\">French Southern Territories</option>\\r\\n                      <option value=\\\"GA\\\">Gabon</option>\\r\\n                      <option value=\\\"GM\\\">Gambia</option>\\r\\n                      <option value=\\\"GE\\\">Georgia</option>\\r\\n                      <option value=\\\"DE\\\">Germany</option>\\r\\n                      <option value=\\\"GH\\\">Ghana</option>\\r\\n                      <option value=\\\"GI\\\">Gibraltar</option>\\r\\n                      <option value=\\\"GR\\\">Greece</option>\\r\\n                      <option value=\\\"GL\\\">Greenland</option>\\r\\n                      <option value=\\\"GD\\\">Grenada</option>\\r\\n                      <option value=\\\"GP\\\">Guadeloupe</option>\\r\\n                      <option value=\\\"GU\\\">Guam</option>\\r\\n                      <option value=\\\"GT\\\">Guatemala</option>\\r\\n                      <option value=\\\"GG\\\">Guernsey</option>\\r\\n                      <option value=\\\"GN\\\">Guinea</option>\\r\\n                      <option value=\\\"GW\\\">Guinea-Bissau</option>\\r\\n                      <option value=\\\"GY\\\">Guyana</option>\\r\\n                      <option value=\\\"HT\\\">Haiti</option>\\r\\n                      <option value=\\\"HM\\\">Heard Island and McDonald Islands</option>\\r\\n                      <option value=\\\"HN\\\">Honduras</option>\\r\\n                      <option value=\\\"HK\\\">Hong Kong S.A.R., China</option>\\r\\n                      <option value=\\\"HU\\\">Hungary</option>\\r\\n                      <option value=\\\"IS\\\">Iceland</option>\\r\\n                      <option value=\\\"IN\\\">India</option>\\r\\n                      <option value=\\\"ID\\\">Indonesia</option>\\r\\n                      <option value=\\\"IR\\\">Iran</option>\\r\\n                      <option value=\\\"IQ\\\">Iraq</option>\\r\\n                      <option value=\\\"IE\\\">Ireland</option>\\r\\n                      <option value=\\\"IM\\\">Isle of Man</option>\\r\\n                      <option value=\\\"IL\\\">Israel</option>\\r\\n                      <option value=\\\"IT\\\">Italy</option>\\r\\n                      <option value=\\\"CI\\\">Ivory Coast</option>\\r\\n                      <option value=\\\"JM\\\">Jamaica</option>\\r\\n                      <option value=\\\"JP\\\">Japan</option>\\r\\n                      <option value=\\\"JE\\\">Jersey</option>\\r\\n                      <option value=\\\"JO\\\">Jordan</option>\\r\\n                      <option value=\\\"KZ\\\">Kazakhstan</option>\\r\\n                      <option value=\\\"KE\\\">Kenya</option>\\r\\n                      <option value=\\\"KI\\\">Kiribati</option>\\r\\n                      <option value=\\\"KW\\\">Kuwait</option>\\r\\n                      <option value=\\\"KG\\\">Kyrgyzstan</option>\\r\\n                      <option value=\\\"LA\\\">Laos</option>\\r\\n                      <option value=\\\"LV\\\">Latvia</option>\\r\\n                      <option value=\\\"LB\\\">Lebanon</option>\\r\\n                      <option value=\\\"LS\\\">Lesotho</option>\\r\\n                      <option value=\\\"LR\\\">Liberia</option>\\r\\n                      <option value=\\\"LY\\\">Libya</option>\\r\\n                      <option value=\\\"LI\\\">Liechtenstein</option>\\r\\n                      <option value=\\\"LT\\\">Lithuania</option>\\r\\n                      <option value=\\\"LU\\\">Luxembourg</option>\\r\\n                      <option value=\\\"MO\\\">Macao S.A.R., China</option>\\r\\n                      <option value=\\\"MK\\\">Macedonia</option>\\r\\n                      <option value=\\\"MG\\\">Madagascar</option>\\r\\n                      <option value=\\\"MW\\\">Malawi</option>\\r\\n                      <option value=\\\"MY\\\">Malaysia</option>\\r\\n                      <option value=\\\"MV\\\">Maldives</option>\\r\\n                      <option value=\\\"ML\\\">Mali</option>\\r\\n                      <option value=\\\"MT\\\">Malta</option>\\r\\n                      <option value=\\\"MH\\\">Marshall Islands</option>\\r\\n                      <option value=\\\"MQ\\\">Martinique</option>\\r\\n                      <option value=\\\"MR\\\">Mauritania</option>\\r\\n                      <option value=\\\"MU\\\">Mauritius</option>\\r\\n                      <option value=\\\"YT\\\">Mayotte</option>\\r\\n                      <option value=\\\"MX\\\">Mexico</option>\\r\\n                      <option value=\\\"FM\\\">Micronesia</option>\\r\\n                      <option value=\\\"MD\\\">Moldova</option>\\r\\n                      <option value=\\\"MC\\\">Monaco</option>\\r\\n                      <option value=\\\"MN\\\">Mongolia</option>\\r\\n                      <option value=\\\"ME\\\">Montenegro</option>\\r\\n                      <option value=\\\"MS\\\">Montserrat</option>\\r\\n                      <option value=\\\"MA\\\">Morocco</option>\\r\\n                      <option value=\\\"MZ\\\">Mozambique</option>\\r\\n                      <option value=\\\"MM\\\">Myanmar</option>\\r\\n                      <option value=\\\"NA\\\">Namibia</option>\\r\\n                      <option value=\\\"NR\\\">Nauru</option>\\r\\n                      <option value=\\\"NP\\\">Nepal</option>\\r\\n                      <option value=\\\"NL\\\">Netherlands</option>\\r\\n                      <option value=\\\"AN\\\">Netherlands Antilles</option>\\r\\n                      <option value=\\\"NC\\\">New Caledonia</option>\\r\\n                      <option value=\\\"NZ\\\">New Zealand</option>\\r\\n                      <option value=\\\"NI\\\">Nicaragua</option>\\r\\n                      <option value=\\\"NE\\\">Niger</option>\\r\\n                      <option value=\\\"NG\\\">Nigeria</option>\\r\\n                      <option value=\\\"NU\\\">Niue</option>\\r\\n                      <option value=\\\"NF\\\">Norfolk Island</option>\\r\\n                      <option value=\\\"KP\\\">North Korea</option>\\r\\n                      <option value=\\\"MP\\\">Northern Mariana Islands</option>\\r\\n                      <option value=\\\"NO\\\">Norway</option>\\r\\n                      <option value=\\\"OM\\\">Oman</option>\\r\\n                      <option value=\\\"PK\\\">Pakistan</option>\\r\\n                      <option value=\\\"PW\\\">Palau</option>\\r\\n                      <option value=\\\"PS\\\">Palestinian Territory</option>\\r\\n                      <option value=\\\"PA\\\">Panama</option>\\r\\n                      <option value=\\\"PG\\\">Papua New Guinea</option>\\r\\n                      <option value=\\\"PY\\\">Paraguay</option>\\r\\n                      <option value=\\\"PE\\\">Peru</option>\\r\\n                      <option value=\\\"PH\\\">Philippines</option>\\r\\n                      <option value=\\\"PN\\\">Pitcairn</option>\\r\\n                      <option value=\\\"PL\\\">Poland</option>\\r\\n                      <option value=\\\"PT\\\">Portugal</option>\\r\\n                      <option value=\\\"PR\\\">Puerto Rico</option>\\r\\n                      <option value=\\\"QA\\\">Qatar</option>\\r\\n                      <option value=\\\"RE\\\">Reunion</option>\\r\\n                      <option value=\\\"RO\\\">Romania</option>\\r\\n                      <option value=\\\"RU\\\">Russia</option>\\r\\n                      <option value=\\\"RW\\\">Rwanda</option>\\r\\n                      <option value=\\\"BL\\\">Saint Barthelemy</option>\\r\\n                      <option value=\\\"SH\\\">Saint Helena</option>\\r\\n                      <option value=\\\"KN\\\">Saint Kitts and Nevis</option>\\r\\n                      <option value=\\\"LC\\\">Saint Lucia</option>\\r\\n                      <option value=\\\"MF\\\">Saint Martin (French part)</option>\\r\\n                      <option value=\\\"PM\\\">Saint Pierre and Miquelon</option>\\r\\n                      <option value=\\\"VC\\\">Saint Vincent and the Grenadines</option>\\r\\n                      <option value=\\\"WS\\\">Samoa</option>\\r\\n                      <option value=\\\"SM\\\">San Marino</option>\\r\\n                      <option value=\\\"ST\\\">Sao Tome and Principe</option>\\r\\n                      <option value=\\\"SA\\\">Saudi Arabia</option>\\r\\n                      <option value=\\\"SN\\\">Senegal</option>\\r\\n                      <option value=\\\"RS\\\">Serbia</option>\\r\\n                      <option value=\\\"SC\\\">Seychelles</option>\\r\\n                      <option value=\\\"SL\\\">Sierra Leone</option>\\r\\n                      <option value=\\\"SG\\\">Singapore</option>\\r\\n                      <option value=\\\"SK\\\">Slovakia</option>\\r\\n                      <option value=\\\"SI\\\">Slovenia</option>\\r\\n                      <option value=\\\"SB\\\">Solomon Islands</option>\\r\\n                      <option value=\\\"SO\\\">Somalia</option>\\r\\n                      <option value=\\\"ZA\\\">South Africa</option>\\r\\n                      <option value=\\\"GS\\\">South Georgia and the South Sandwich Islands</option>\\r\\n                      <option value=\\\"KR\\\">South Korea</option>\\r\\n                      <option value=\\\"ES\\\">Spain</option>\\r\\n                      <option value=\\\"LK\\\">Sri Lanka</option>\\r\\n                      <option value=\\\"SD\\\">Sudan</option>\\r\\n                      <option value=\\\"SR\\\">Suriname</option>\\r\\n                      <option value=\\\"SJ\\\">Svalbard and Jan Mayen</option>\\r\\n                      <option value=\\\"SZ\\\">Swaziland</option>\\r\\n                      <option value=\\\"SE\\\">Sweden</option>\\r\\n                      <option value=\\\"CH\\\">Switzerland</option>\\r\\n                      <option value=\\\"SY\\\">Syria</option>\\r\\n                      <option value=\\\"TW\\\">Taiwan</option>\\r\\n                      <option value=\\\"TJ\\\">Tajikistan</option>\\r\\n                      <option value=\\\"TZ\\\">Tanzania</option>\\r\\n                      <option value=\\\"TH\\\">Thailand</option>\\r\\n                      <option value=\\\"TL\\\">Timor-Leste</option>\\r\\n                      <option value=\\\"TG\\\">Togo</option>\\r\\n                      <option value=\\\"TK\\\">Tokelau</option>\\r\\n                      <option value=\\\"TO\\\">Tonga</option>\\r\\n                      <option value=\\\"TT\\\">Trinidad and Tobago</option>\\r\\n                      <option value=\\\"TN\\\">Tunisia</option>\\r\\n                      <option value=\\\"TR\\\">Turkey</option>\\r\\n                      <option value=\\\"TM\\\">Turkmenistan</option>\\r\\n                      <option value=\\\"TC\\\">Turks and Caicos Islands</option>\\r\\n                      <option value=\\\"TV\\\">Tuvalu</option>\\r\\n                      <option value=\\\"VI\\\">U.S. Virgin Islands</option>\\r\\n                      <option value=\\\"USAF\\\">US Armed Forces</option>\\r\\n                      <option value=\\\"UG\\\">Uganda</option>\\r\\n                      <option value=\\\"UA\\\">Ukraine</option>\\r\\n                      <option value=\\\"AE\\\">United Arab Emirates</option>\\r\\n                      <option value=\\\"GB\\\">United Kingdom</option>\\r\\n                      <option value=\\\"US\\\" selected=\\\"selected\\\">United States</option>\\r\\n                      <option value=\\\"UM\\\">United States Minor Outlying Islands</option>\\r\\n                      <option value=\\\"UY\\\">Uruguay</option>\\r\\n                      <option value=\\\"UZ\\\">Uzbekistan</option>\\r\\n                      <option value=\\\"VU\\\">Vanuatu</option>\\r\\n                      <option value=\\\"VA\\\">Vatican</option>\\r\\n                      <option value=\\\"VE\\\">Venezuela</option>\\r\\n                      <option value=\\\"VN\\\">Vietnam</option>\\r\\n                      <option value=\\\"WF\\\">Wallis and Futuna</option>\\r\\n                      <option value=\\\"EH\\\">Western Sahara</option>\\r\\n                      <option value=\\\"YE\\\">Yemen</option>\\r\\n                      <option value=\\\"ZM\\\">Zambia</option>\\r\\n                      <option value=\\\"ZW\\\">Zimbabwe</option>\\r\\n                  </select>\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n    \\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label for=\\\"phone\\\">Phone</label>\\r\\n                  <input type=\\\"text\\\" formControlName=\\\"phone\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.phone.errors }\\\" />\\r\\n                          <div *ngIf=\\\"submitted && f.phone.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.phone.errors.required\\\">Phone is required</div>\\r\\n                          </div>\\r\\n                </div>\\r\\n      \\r\\n              </div>\\r\\n    \\r\\n          </div>\\r\\n    \\r\\n        </div>\\r\\n    </div> -->\\r\\n\\r\\n    <div class=\\\"form-check mt-4\\\">\\r\\n      <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" value=\\\"\\\" formControlName=\\\"accept\\\" id=\\\"remember_me\\\">\\r\\n      <label class=\\\"form-check-label\\\" for=\\\"remember_me\\\">I agree to the <a href=\\\"javascript:void(0)\\\">Terms of Use</a></label>\\r\\n      <div class=\\\"help-block text-danger\\\" *ngIf=\\\"accept.invalid && submitted\\\"> \\r\\n      Accept terms of use.\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mt-4\\\">\\r\\n        <button class=\\\"btn btn-lg btn-primary btn-submit btn-radius\\\">Register Now</button>\\r\\n      </div>\\r\\n\\r\\n  </form>  \\r\\n\\r\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL3NpZ24tdXAvc2lnbi11cC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\nimport { AuthService } from '@modules/auth/services/auth.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { LoaderService } from '@core/services/loader-service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n// custom validator to check that two fields match\r\nfunction MustMatch(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n            // return if another validator has already found an error on the matchingControl\r\n            return;\r\n        }\r\n\r\n        // set error on matchingControl if validation fails\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ mustMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'app-sign-up',\r\n    templateUrl: './sign-up.component.html',\r\n    styleUrls: ['./sign-up.component.scss']\r\n})\r\n\r\nexport class SignUpComponent implements OnInit {\r\n    registerForm: FormGroup;\r\n    submitted = false;\r\n    referralName: any = 'NA';\r\n    referralId: any;\r\n    constructor(private formBuilder: FormBuilder, private authService: AuthService,\r\n        private router: Router, private loader: LoaderService,\r\n        private route: ActivatedRoute, ) { }\r\n\r\n    ngOnInit() {\r\n        this.registerForm = this.formBuilder.group({\r\n            userName: ['demouser', [Validators.required, Validators.minLength(6)], this.isUernameUnique.bind(this)],\r\n            email: ['a@a.com', [Validators.required, Validators.email], this.isEmailUnique.bind(this)],\r\n            confirmEmail: ['a@a.com', [Validators.required, Validators.email]],\r\n            password: ['111111', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['111111', Validators.required],\r\n            accept: ['', Validators.requiredTrue]\r\n        }, {\r\n            validator: [MustMatch('password', 'confirmPassword'), MustMatch('email', 'confirmEmail')]\r\n        });\r\n\r\n        this.checkReferralCode();\r\n    }\r\n\r\n    checkReferralCode() {\r\n        this.route.queryParams\r\n            .subscribe(params => {\r\n                console.log(params);\r\n                var size = Object.keys(params).length;\r\n                console.log(size)\r\n                if (size === 1) {\r\n                    this.loader.startLoading();\r\n                    this.authService.getReferral(params).subscribe((result) => {\r\n                        this.loader.stopLoading();\r\n                        if (result.status === 'success') {\r\n                            this.referralName = result.record.firstName + ' ' + result.record.lastName;\r\n                            this.referralId = result.record.userId;\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    isUernameUnique(control: FormControl) {\r\n        const q = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                this.authService.checkEmailToken({ email: control.value }).subscribe((res) => {\r\n                    if (res.status == 'error') {\r\n                        resolve({ 'isUernameUnique': true });\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n            }, 1000);\r\n        });\r\n        return q;\r\n    }\r\n\r\n    isEmailUnique(control: FormControl) {\r\n        const q = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                this.authService.checkEmailToken({ email: control.value }).subscribe((res) => {\r\n                    if (res.status == 'error') {\r\n                        resolve({ 'isEmailUnique': true });\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n            }, 1000);\r\n        });\r\n        return q;\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.registerForm.controls; }\r\n\r\n    get accept() {\r\n        return this.registerForm.get('accept');\r\n    }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        if (this.registerForm.invalid) {\r\n            return;\r\n        }\r\n        const formData = this.registerForm.value;\r\n        formData.referralId = '';\r\n        if (this.referralId) {\r\n            formData.referralId = this.referralId\r\n        }\r\n        this.loader.startLoading();\r\n        this.authService.register(formData).subscribe((result) => {\r\n            this.loader.stopLoading();\r\n            if (result.status == 'success') {\r\n                this.router.navigate(['auth/thankyou']);\r\n            } else {\r\n                alert(result.message);\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9jb21wb25lbnRzL3VwZGF0ZS1wYXNzd29yZC91cGRhdGUtcGFzc3dvcmQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<header class=\\\"top-header forgot-pass\\\">\\r\\n\\r\\n\\r\\n    <div class=\\\"container top-banner\\\">\\r\\n        <div *ngIf=\\\"isValidReset\\\" class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-5 banner-heading\\\">\\r\\n                <h2>Reset <strong>password! </strong></h2>\\r\\n                <label>\\r\\n                    Provide your username and we'll send instructions to the email associated with your account to set a\\r\\n                    new password.\\r\\n                </label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"!isValidReset\\\" class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-5 banner-heading\\\">\\r\\n                <h2>Reset Password <strong>Error! </strong></h2>\\r\\n                <label>\\r\\n                    We are unable to verify you.\\r\\n                </label>\\r\\n                <!-- <div class=\\\"col-md-12\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <button class=\\\"btn get-early mtb-30\\\">Resend instruction</button>\\r\\n                    </div>  \\r\\n                </div> -->\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- banner -->\\r\\n\\r\\n</header>\\r\\n\\r\\n\\r\\n<div class=\\\"row justify-content-center\\\" *ngIf=\\\"isValidReset\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n\\r\\n        <div class=\\\"shadow rounded mt-5\\\">\\r\\n            <div class=\\\"card-body p-5\\\">\\r\\n                <h3 class=\\\"card-title\\\">Reset your password</h3>\\r\\n                <span style='color:green;'>{{message}}</span>\\r\\n                <div class=\\\"card-text\\\">\\r\\n\\r\\n                    <form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                            <div [ngClass]=\\\"{'has-error': \\r\\n                        resetForm.get('password').invalid && ( \\r\\n                        resetForm.get('password').dirty || \\r\\n                        resetForm.get('password').touched)}\\\" class=\\\"form-group\\\">\\r\\n\\r\\n                                <div class=\\\"white-btn rmshd\\\">\\r\\n                                    <input formControlName=\\\"password\\\" type=\\\"password\\\"   \\r\\n                                        placeholder=\\\"Enter password\\\" class=\\\"form-control\\\" autofocus>\\r\\n                                </div>\\r\\n\\r\\n                                <div *ngIf=\\\"\\r\\n                            resetForm.get('password').invalid && ( \\r\\n                            resetForm.get('password').dirty || \\r\\n                            resetForm.get('password').touched)\\\">\\r\\n                                    <span *ngIf=\\\"resetForm.get('password').errors.required\\\" class=\\\"help-block\\\">\\r\\n                                        *Password is required.\\r\\n                                    </span>\\r\\n\\r\\n                                    <span *ngIf=\\\"\\r\\n                                !resetForm.get('password').errors.required && (\\r\\n                                resetForm.get('password').errors.minlength ||\\r\\n                                resetForm.get('password').errors.maxlength )\\\" class=\\\"help-block\\\">\\r\\n                                        *Password must be 6-20 characters long.\\r\\n                                    </span>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div [ngClass]=\\\"{'has-error': \\r\\n                        resetForm.get('confirm_password').invalid && ( \\r\\n                        resetForm.get('confirm_password').dirty || \\r\\n                        resetForm.get('confirm_password').touched)}\\\" class=\\\"form-group\\\">\\r\\n                                <div class=\\\"white-btn rmshd\\\">\\r\\n                                    <input formControlName=\\\"confirm_password\\\" type=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                                        placeholder=\\\"confirm password\\\">\\r\\n                                </div>\\r\\n\\r\\n                                <div *ngIf=\\\"\\r\\n                            resetForm.get('confirm_password').value !== \\r\\n                            resetForm.get('password').value && \\r\\n                            resetForm.get('confirm_password').touched\\\">\\r\\n                                    <span class=\\\"help-block\\\">\\r\\n                                        Confirm password must be same.\\r\\n                                    </span>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                        <div class=\\\"col-md-4\\\">\\r\\n                            <button class=\\\"btn sign-up-trainer\\\" [disabled]=\\\"!resetForm.valid\\\">Reset</button>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators\r\n} from '@angular/forms';\r\n\r\nimport {\r\n  Router,\r\n  ActivatedRoute,\r\n  ParamMap\r\n} from '@angular/router';\r\nimport { AuthService } from '@modules/auth/services/auth.service';\r\nimport { JWTAuthService } from '@core/services/jwt-auth.service';\r\nimport { LoaderService } from '@core/services/loader-service';\r\n\r\nfunction passwordMatchValidator(g: FormGroup) {\r\n  return g.get('password').value === g.get('confirm_password').value\r\n    ? null : { 'mismatch': true };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-update-password',\r\n  templateUrl: './update-password.component.html',\r\n  styleUrls: ['./update-password.component.css']\r\n})\r\nexport class UpdatePasswordComponent implements OnInit {\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private loader: LoaderService,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  isValidReset: boolean;\r\n  resetForm: FormGroup;\r\n  dismissible = true;\r\n  message: any;\r\n  token: any;\r\n\r\n  createForm() {\r\n    this.resetForm = this.fb.group({\r\n      password: ['', [Validators.required,Validators.minLength(6)]],\r\n      confirm_password: ['', Validators.required]\r\n    }, {\r\n      validator: passwordMatchValidator\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.resetForm.invalid) {\r\n      return;\r\n    }\r\n    let formModel = this.resetForm.value;\r\n    formModel.token = this.token;\r\n    this.loader.startLoading();\r\n    this.authService.reset(formModel)\r\n      .subscribe((res) => {\r\n        if (res.status === 'success') {\r\n          this.loader.stopLoading();\r\n          this.message = 'Your password has reset successfully';\r\n        } else {\r\n          this.message = 'Internal Server Error. Please try again';\r\n        }\r\n      })\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.isValidReset = false;\r\n    this.createForm();\r\n    this.loader.startLoading();\r\n    this.route.params.subscribe(params => {\r\n      this.token = params.code;\r\n      this.authService.confirmToken({\r\n        id: params.id,\r\n        token: params.code\r\n      })\r\n        .subscribe((response: any) => {\r\n          this.loader.stopLoading();\r\n          if (response.status == 'success') {\r\n            this.isValidReset = true\r\n          }\r\n        })\r\n    })\r\n  }\r\n}\r\n","/**\r\n * @resolver\r\n * @description\r\n * Define all the application level resolvers\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { JWTAuthService } from '@core/services/jwt-auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n@Injectable()\r\nexport class HasTokenResolver {\r\n  constructor(\r\n    private authService: JWTAuthService,\r\n    private router: Router\r\n  ) { }\r\n  resolve(): any {\r\n    if (this.authService.IsAuthUser()) {\r\n      this.router.navigate([\"/user\"]);\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class AppRoutingAccess {\r\n  constructor(\r\n    private authService: JWTAuthService,\r\n    private router: Router\r\n  ) { }\r\n  resolve(): any {\r\n    if (!this.authService.IsAuthUser()) {\r\n      this.router.navigate([\"auth/login\"]);\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class AppCheckUserAlreadyLogin {\r\n  constructor(\r\n    private authService: JWTAuthService,\r\n    private router: Router\r\n  ) { }\r\n  resolve(): any {\r\n    if (this.authService.IsAuthUser()) {\r\n      this.router.navigate([\"/dashboard\"]);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}